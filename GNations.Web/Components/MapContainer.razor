@using GNations.Models
@using GNations.Resources.Helpers
@using GNations.Resources.Images
@using GNations.Web.Models
@using GNations.Web.Services
@using Newtonsoft.Json
@inject BrowserService Service

<div class="game-container">

    
@*    <h1>Window Dimensions</h1>

    <p>Window Height: @Height</p>
    <p>Window Width: @Width</p>

    <button @onclick="GetDimensions">Get Dimensions</button>*@

    <div class="menu-nav menu-nav-up">
         <button type="button" class="btn-nav-default">Menu 1</button>
         <button type="button" class="btn-nav-default">Menu 2</button>
         <button type="button" class="btn-nav-default">Menu 3</button>
         <button type="button" class="btn-nav-default">Menu 4</button>
    </div>

    <div class="map-container">

        <MapGrid @ref="ChildContent">@_mapGridMarkup</MapGrid>


        <Continent @ref="ContinentComponent" Continents="@_continents"/>


        @foreach(var port in _harbors)
        {
            <div class="harbor @port.StyleClass">
                @((MarkupString)port.SvgMarkup);
            </div>
        }

        @foreach(var point in _waypoints)
        {
            <div class="waypoint @point.StyleClass">
                @((MarkupString)point.SvgMarkup);
            </div>
        }

    </div>

        <div class="menu-nav menu-nav-up">
         <button type="button" class="btn-nav-default">Menu 1</button>
         <button type="button" class="btn-nav-default">Menu 2</button>
         <button type="button" class="btn-nav-default">Menu 3</button>
         <button type="button" class="btn-nav-default">Menu 4</button>
    </div>
</div>


@code {
    string _continentCss => $"";
    string markup = string.Empty;
    public string _mapGridMarkup = string.Empty;
    List<ContinentDisplayModel> _continents = new List<ContinentDisplayModel>();
    List<HarborDisplayModel> _harbors = new List<HarborDisplayModel>();
    List<WaypointDisplayModel> _waypoints = new List<WaypointDisplayModel>();

    //viewport size
    public int ViewportHeight { get; set; }
    public int ViewportWidth { get; set; }

    //map position in viewport
    public int MapTop { get; set; }
    public int MapLeft { get; set; }

    //these values control map rendering
    public int MapHeight { get; set; }
    public int MapWidth { get; set; }

    protected MapGrid? ChildContent;
    protected Continent? ContinentComponent;


    protected override void OnInitialized()
    {
        LoadContinents();
        LoadHarbors();
        LoadWaypoints();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await GetViewportDimensions();
        SetMapDimensions();
        await Service.ResizeMap(MapWidth, MapHeight);
        await GetMapPosition();
        RepositionContinents();
        InitializeGrid();
    }

    public void SetMapDimensions()
    {
        var mapDimensions = MapManager.GetMapDimensions(ViewportWidth, ViewportHeight);
        MapWidth = mapDimensions.Item1;
        MapHeight = mapDimensions.Item2;
    }

    public async Task GetViewportDimensions() {
        var dimension = await Service.GetDimensions();
        ViewportHeight = dimension.Height;
        ViewportWidth = dimension.Width;
    }

    public async Task GetMapPosition() {
        var position = await Service.GetMapPosition();
        MapTop = position.Top;
        MapLeft = position.Left;
    }

    public void InitializeGrid()
    {
        _mapGridMarkup = MapManager.GetMapGrid(MapWidth, MapHeight, MapTop, MapLeft);
        if(ChildContent != null)
        {
            ChildContent.RefreshGrid(_mapGridMarkup);
        }
    }

    public void RepositionContinents()
    {
        _continents = MapManager.RecalculateContinentPositions(_continents, MapWidth, MapHeight).ToList();
        _continents = DisplayHelper.AssignStyleAttributes(_continents).ToList();

        //var s = DisplayHelper.GetStyleAttributesForScaling(0.15f);

        if(ContinentComponent != null)
        {
            ContinentComponent.RefreshGrid();
        }
    }

    public void LoadContinents()
    {
        _continents = ImageRepository.GetContinents().ToList();
    }

    public void LoadHarbors()
    {
        _harbors = ImageRepository.GetHarbors();
    }

    public void LoadWaypoints()
    {
        _waypoints = ImageRepository.GetWaypoints();
        WaypointHelper.GetWaypointLineCoordinates(_waypoints);
    }
}
