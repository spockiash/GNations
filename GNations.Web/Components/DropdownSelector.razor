@using GNations.Models
@if(DropdownOptions != null)
{
    <div class="dropdown-selector">
        @foreach (var option in DropdownOptions)
        {
            <button  @onclick="@(e => Select(e, option.Id, option.Name ))" type="button" class="btn-nav-dropdown" id="@option.Id" name="@option.Name">@option.Description</button>
    }
    </div>

}


@code {

    public List<DropdownSelectorModel>? DropdownOptions { get; set; }
    [Parameter]
    public int SelectionId { get; set; } = 0;
    [Parameter]
    public string SelectionName { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<int> SelectionIdChanged { get; set; }
    [Parameter]
    public EventCallback<string> SelectionNameChanged { get; set; }
    [Parameter]
    public EventCallback<Tuple<int, string?>> OnDropdownSelection { get; set; }

    public void Refresh()
    {
        StateHasChanged();
    }

    public async Task Select(MouseEventArgs args, int id, string? name)
    {
        SelectionId = id;
        SelectionName = string.IsNullOrEmpty(name) ? string.Empty : name;
        await SelectionIdChanged.InvokeAsync(SelectionId);
        await SelectionNameChanged.InvokeAsync(SelectionName);
        await OnDropdownSelection.InvokeAsync(new Tuple<int, string?>(id, name));
    }

    public void InvokeDropdown(List<DropdownSelectorModel> options)
    {
        DropdownOptions = options;
        Refresh();
    }

    public void RevokeDropdown()
    {
        DropdownOptions = null;
        Refresh();
    }
}
