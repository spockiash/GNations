@page "/Editor"
@using GNations.Models
@using System.Text
@using GNations.Resources.Enums
@using GNations.Resources.Helpers


<div class="menu-nav menu-nav-up">
    <button @onclick="DisplayAddMenu" type="button" class="btn-nav-default">Add</button>
    <button @onclick="ClearAdd" type="button" class="btn-nav-default">Clear selection</button>
    <button type="button" class="btn-nav-default">Save</button>
</div>



<div @onclick="EditorClickHandler" class="editor-container" id="editor">
    @_promptMessage
    <Continent @ref="ContinentComponent" Continents="@MapState.Continents"/>
    <EditorBufferOverlay @ref="BufferOverlay" Continent="@Continent"/>
</div>

<EditorContextMenu @ref="ContextMenu" OnPositionChange="ChangeModelPosition" ContextModel="DisplayBase" />

<DropdownSelector @ref="dropdownSelector" OnDropdownSelection="SelectDropdownItem" @bind-SelectionId="_dropdownSelectionId" @bind-SelectionName="_dropdownSelectionName"/>

@code {
    public List<ContinentDisplayModel> Continents { get; set; } = new List<ContinentDisplayModel>();
    public List<DropdownSelectorModel> AddOptions { get; set; } = new List<DropdownSelectorModel>();

    public ContinentDisplayModel Continent { get; set; } = new ContinentDisplayModel();

    public MapStateModel MapState { get; set; } = new MapStateModel();
    public EditorImagesModel ImagesModel { get; set; } = new EditorImagesModel();
    public EditorAddModel? AddModel { get; set; } = null;
    public MapDisplayBase DisplayBase { get; set; } = new MapDisplayBase();

    private string? mousePointerMessage = "init";
    private string? _promptMessage = "init";
    string _dropdownSelectionName = string.Empty;

    List<string> _continentImages = new List<string>();

    int _continentCounter = 0;
    int _dropdownSelectionId = 0;

    bool IsDropdownInvoked = false;

    protected Continent? ContinentComponent;
    protected DropdownSelector? dropdownSelector;
    protected EditorBufferOverlay? BufferOverlay;
    protected EditorContextMenu? ContextMenu;

    protected override void OnInitialized()
    {
        LoadContinents();
        LoadMenuOptions();

    }

    public void LoadMenuOptions()
    {
        AddOptions = EditorManager.GetAddOptions();
    }

    public void LoadContinents()
    {
        ImagesModel.ContinentImages = ImageRepository.GetContinentImages();
    }

    private void DisplayAddMenu()
    {
        if(IsDropdownInvoked)
        {
            dropdownSelector.RevokeDropdown();
            IsDropdownInvoked = false;
        }
        else
        {
            dropdownSelector.InvokeDropdown(AddOptions);
            IsDropdownInvoked = true;
        }
    }

    private void EditorClickHandler(MouseEventArgs e)
    {
        if(AddModel != null)
        {
            var selectEnum = (EditorDropdownEnum)AddModel.Selection;
            _promptMessage = AddModel.PromptMessage;

            switch (selectEnum)
            {
                case EditorDropdownEnum.AddContinent:
                    Continent = EditorManager.GetSingleContinent(AddModel, MapState, ImagesModel, (int)e.OffsetX, (int)e.OffsetY);
                    DisplayBase = EditorDropdownHelper.ContinentToBase(Continent);
                    BufferOverlay.RefreshGrid();
                    ContextMenu.Refresh();
                    //ContinentComponent.RefreshGrid();
                    break;
                case EditorDropdownEnum.AddHarbor:
                    //TODO
                    break;
                case EditorDropdownEnum.AddWaypoint:
                    //TODO
                    break;
                case EditorDropdownEnum.AddIsland:
                    //TODO
                    break;
            }
        }
    }

    private void ClearAdd()
    {
        if(IsDropdownInvoked)
        {
            dropdownSelector.RevokeDropdown();
        }
        _promptMessage = $"Selection cleared";
        AddModel = null;
    }

    private void SelectDropdownItem(Tuple<int, string?> args)
    {
        _promptMessage = $"Selection: {args.Item2}";
        AddModel = EditorDropdownHelper.ResolveAddDropdownSelection(args);
        dropdownSelector.RevokeDropdown();
    }

    public void ChangeModelPosition(MapDisplayBase displayModel)
    {
        EditorDropdownHelper.UpdateContinent(Continent, DisplayBase);
        BufferOverlay.RefreshGrid();
        var x = 1;
    }

}


                    //https://stackoverflow.com/questions/44724122/how-to-get-only-base-class-properties-from-derived-class
                    //https://docs.microsoft.com/cs-cz/aspnet/core/blazor/forms-validation?view=aspnetcore-6.0
                    //https://www.method.com/insights/demystifying-funcs-in-csharp/
                    //https://www.c-sharpcorner.com/article/5-steps-to-implement-event-call-backs-in-blazor/
                    //https://stackoverflow.com/questions/68146318/calling-a-method-in-the-parent-component-from-a-child-component-using-blazor-ser